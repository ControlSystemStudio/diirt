/**
 * Copyright (C) 2010-12 Brookhaven National Laboratory
 * All rights reserved. Use is subject to license terms.
 */
package org.epics.pvmanager.expression;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.epics.pvmanager.PVReaderDirector;

/**
 * A expression that returns the result of a dynamically managed group.
 * Once the group is created, any {@link DesiredRateExpression} can be
 * added dynamically. The exceptions eventually generated by those
 * expressions can be obtained through {@link #lastExceptions() }.
 *
 * @param <R> the type for the values in the read map
 * @param <W> the type for the values in the write map
 * @author carcassi
 */
public class ReadWriteMap<R, W> extends DesiredRateReadWriteExpressionImpl<Map<String, R>, Map<String, W>> {

    private final Object lock = new Object();
    private final Map<String, DesiredRateExpression<R>> expressions = new HashMap<>();
    private PVReaderDirector<?> director;

    /**
     * Creates a new group.
     */
    public ReadWriteMap() {
        super(new ReadMap<R>(), new WriteMap<W>());
    }
    
    private ReadMap<R> getReadMap() {
        return (ReadMap<R>) getDesiredRateExpressionImpl();
    }
    
    private WriteMap<W> getWriteMap() {
        return (WriteMap<W>) getWriteExpressionImpl();
    }

    /**
     * Removes all the expressions currently in the map.
     * 
     * @return this expression
     */
    public ReadWriteMap<R, W> clear() {
        getReadMap().clear();
        getWriteMap().clear();
        return this;
    }

    /**
     * Returns the number of expressions in the group.
     * 
     * @return number of expressions in the group
     */
    public int size() {
        return getReadMap().size();
    }

    /**
     * Adds the expression to the map.
     * 
     * @param expression the expression to be added
     * @return this expression
     */
    public ReadWriteMap<R, W> add(DesiredRateReadWriteExpression<R, W> expression) {
        getReadMap().add(expression);
        getWriteMap().add(expression);
        return this;
    }
    
    /**
     * Adds the expressions to the map.
     *
     * @param expressions the new list of expressions
     * @return this expression
     */
    public ReadWriteMap<R, W> add(DesiredRateReadWriteExpressionList<R, W> expressions) {
        getReadMap().add(expressions);
        getWriteMap().add(expressions);
        return this;
    }

    /**
     * Removes the expression with the given name.
     * 
     * @param name the name of the expression to remove
     * @return this expression
     */
    public ReadWriteMap<R, W> remove(String name) {
        getReadMap().remove(name);
        getWriteMap().remove(name);
        return this;
    }
    
    /**
     * Removes the expressions from the map.
     *
     * @param names the names of the expressions to remove
     * @return this expression
     */
    public ReadWriteMap<R, W> remove(List<String> names) {
        getReadMap().remove(names);
        getWriteMap().remove(names);
        return this;
    }
    
}
